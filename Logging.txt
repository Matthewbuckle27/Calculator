import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Before("execution(* com.maveric.projectcharter.controller.*.*(..))")
    public void logBeforeControllerMethod(JoinPoint joinPoint) {
        logger.info("Executing: " + joinPoint.getSignature().toShortString());
        logMethodArguments(joinPoint);
    }

    @AfterReturning(pointcut = "execution(* com.maveric.projectcharter.controller.*.*(..))", returning = "result")
    public void logAfterControllerMethod(Object result) {
        logger.info("Response: " + result.toString());
    }

    @Before("execution(* com.maveric.projectcharter.service.*.*(..))")
    public void logBeforeServiceMethod(JoinPoint joinPoint) {
        logger.info("Executing: " + joinPoint.getSignature().toShortString());
        logMethodArguments(joinPoint);
    }

    @AfterReturning(pointcut = "execution(* com.maveric.projectcharter.service.*.*(..))", returning = "result")
    public void logAfterServiceMethod(Object result) {
        logger.info("Response: " + result.toString());
    }

    private void logMethodArguments(JoinPoint joinPoint) {
        Object[] args = joinPoint.getArgs();
        for (Object arg : args) {
            logger.info("Request Argument: " + arg.toString());
        }
    }
}


/*

package com.maveric.projectcharter.advice;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
@Slf4j
public class LoggingAdivce {

    @Pointcut(value = "execution(* com.maveric.projectcharter.*.*.*(..))")
    public void myPointcut() {
    }

    @Around("myPointcut()")
    public Object applicationLogger(ProceedingJoinPoint joinPoint) throws Throwable {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());
        mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        mapper.configure(SerializationFeature.FAIL_ON_SELF_REFERENCES, false);
        String methodName = joinPoint.getSignature().getName();
        String className = joinPoint.getTarget().getClass().toString();
        Object[] array = joinPoint.getArgs();
        if (array != null) {
            String arguments = mapper.writeValueAsString(array);
            log.info(String.format(
                    "Method name : %s : %s() | Arguments: %s",
                    className, methodName, arguments
            ));
        }

        Object object = joinPoint.proceed();

        if (object != null) {
            String responseObject = mapper.writeValueAsString(object);
            log.info(String.format(
                    "%s : %s() | Response: %s",
                    className, methodName, responseObject
            ));
        }

        return object;
    }
}

*/
